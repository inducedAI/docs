{
  "openapi": "3.0.1",
  "info": {
    "title": "Induced Development Environment API",
    "description": "API for managing browser instances and automation steps within the Induced Development Environment.",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.induced.ai/v1/develop"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/browser": {
      "post": {
        "summary": "Create a Browser Instance",
        "description": "Creates a new browser instance in the development environment.",
        "operationId": "createBrowser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Determines if the browser instance should be local."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Browser instance created successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get":{
        "summary": "Get Browser Instances",
        "description": "Retrieves a list of browser instances.",
        "operationId": "getBrowserInstances",
        "responses": {
          "200": {
            "description": "List of browser instances."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/browser/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the browser instance.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Browser Instance Details",
        "description": "Retrieves the details of a specific browser instance.",
        "operationId": "getBrowserDetails",
        "responses": {
          "200": {
            "description": "Browser instance details."
          },
          "404": {
            "description": "Browser instance not found."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/browser/{id}/terminate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the browser instance.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Terminate Browser Instance",
        "description": "Terminates a specific browser instance.",
        "operationId": "terminateBrowser",
        "responses": {
          "200": {
            "description": "Browser instance terminated successfully."
          },
          "404": {
            "description": "Browser instance not found."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/browser/{id}/variables": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the browser instance for which to retrieve variables.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Browser Variables",
        "description": "Retrieves the variables of a specific browser instance.",
        "operationId": "getBrowserVariables",
        "responses": {
          "200": {
            "description": "List of browser variables."
          },
          "404": {
            "description": "Browser instance not found."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/browser/terminateAll": {
      "post": {
        "summary": "Terminate All Browser Instances",
        "description": "Terminates all active browser instances.",
        "operationId": "terminateAllBrowsers",
        "responses": {
          "200": {
            "description": "All browser instances terminated successfully."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/browser/{id}/steps": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the browser instance for which to retrieve steps.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Browser Steps",
        "description": "Retrieves the steps executed in a specific browser instance.",
        "operationId": "getBrowserSteps",
        "responses": {
          "200": {
            "description": "List of browser steps."
          },
          "404": {
            "description": "Browser instance not found."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/step": {
      "post": {
        "summary": "Create a Step",
        "description": "Creates a new step to be executed in a browser instance.",
        "operationId": "createStep",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "The session identifier of the browser instance."
                  },
                  "tasks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The tasks to be executed in the step.."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Step created successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/step/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the step.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Step Details",
        "description": "Retrieves the details of a specific step.",
        "operationId": "getStepDetails",
        "responses": {
          "200": {
            "description": "Step details."
          },
          "404": {
            "description": "Step not found."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/step/extract": {
      "post": {
        "summary": "Extracts variables from steps",
        "description": "Automatically converts static steps to dynamic steps by extracting variables from the steps.",
        "operationId": "extractVariables",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "steps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The steps that should be converted to dynamic steps."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Variables extracted successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow": {
      "post": {
        "summary": "Create a new workflow",
        "description": "Creates a new workflow with static and dynamic steps.",
        "operationId": "createWorkflow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "staticSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The static steps of the workflow."
                  },
                  "dynamicSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The dynamic steps of the workflow."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow saved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Get all workflows",
        "description": "Gets all the workflows.",
        "operationId": "getAllWorkflows",
        "responses": {
          "200": {
            "description": "Workflows retrieved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow/{id}/save": {
      "post": {
        "summary": "Save an existing workflow",
        "description": "Saves an existing workflow with static and dynamic steps.",
        "operationId": "saveWorkflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow to save."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "staticSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The static steps of the workflow."
                  },
                  "dynamicSteps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The dynamic steps of the workflow."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow saved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow/{id}": {
      "get": {
        "summary": "Get details of a workflow",
        "description": "Gets all the details of a workflow by ID.",
        "operationId": "getWorkflowDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow."
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow details retrieved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow/{id}/variables": {
      "get": {
        "summary": "Get variables of a workflow",
        "description": "Get all the variables attached in this workflow.",
        "operationId": "getWorkflowVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow."
          }
        ],
        "responses": {
          "200": {
            "description": "Variables retrieved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow/{id}/delete": {
      "post": {
        "summary": "Delete a workflow",
        "description": "Deletes a workflow by ID.",
        "operationId": "deleteWorkflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow."
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflow/{id}/run": {
      "post": {
        "summary": "Run a workflow",
        "description": "Runs a workflow and returns a workflow run ID.",
        "operationId": "runWorkflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    }
                  }
                },
                "required": [
                  "variables"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow run ID retrieved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/run/{id}": {
      "get": {
        "summary": "Get details of a workflow run",
        "description": "Gets all the details and logs of a workflow run, including the live streaming URL.",
        "operationId": "getWorkflowRunDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow run."
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow run details retrieved successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/run/{id}/stop": {
      "post": {
        "summary": "Stop a workflow run",
        "description": "Stops a workflow run mid-way.",
        "operationId": "stopWorkflowRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the workflow run."
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow run stopped successfully."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}
